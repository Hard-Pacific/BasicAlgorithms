"""
Реализация алгоритма быстрой сортировки (QuickSort) для списка целых чисел.

QuickSort - это алгоритм "разделяй и властвуй", который работает, выбирая "опорный" элемент из списка
и разделяя остальные элементы на два подсписка: элементы меньше опорного и элементы больше опорного.
Затем подсписки рекурсивно сортируются.

В данной реализации в качестве опорного элемента выбирается случайный элемент, чтобы избежать наихудших сценариев
(например, когда список уже отсортирован), которые могут ухудшить производительность.
"""


from random import choice

class QuickSort:
    """
    Класс для быстрой сортировки.
    """

    def sort(self, numbers: list[int]) -> list[int]:
        """
        Сортирует список целых чисел, используя алгоритм QuickSort.
        """

        # Базовый случай: Если список содержит 0 или 1 элемент, он уже отсортирован.
        if len(numbers) <= 1:
            return numbers

        # Выбираем случайный опорный элемент, чтобы избежать наихудших сценариев с отсортированными/почти отсортированными данными.
        pivot = choice(numbers)

        # Инициализируем списки для хранения элементов меньше, больше и равных опорному элементу.
        left_nums = []
        right_nums = []
        equals_nums = []

        # Разделяем список на основе опорного элемента. Это ядро алгоритма QuickSort.
        for num in numbers:
            if num < pivot:
                left_nums.append(num)
            elif num > pivot:
                right_nums.append(num)
            else:
                equals_nums.append(num)

        return self.sort(left_nums) + equals_nums + self.sort(right_nums)

a = QuickSort()
print(a.sort("Hello"))